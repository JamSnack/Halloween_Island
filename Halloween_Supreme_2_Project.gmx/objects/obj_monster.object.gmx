<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_battle_monster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>OVERWORLD_PAUSE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mob_id = mobID.sphere_elite;
state = "MOVE";
target_x = noone;
target_y = noone;

walkspeed = 1;
hspd = 0;
vspd = 0;

image_xscale = 0.25;
image_yscale = 0.25;
image_speed = 0;

flee_timer = 1*room_speed; //If a battle is fled successfully, disable this enemy for a while.

instance_create(x,y+8,efct_spawn_beam);

path = path_add();
path_calculated = false;

time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MAIN

//-------Step Event Disabling Conditions------------
if instance_exists(obj_battleControl) || game_state == "PAUSE"
{
    if path_exists(path) then path_end();
    path_calculated = false;
    exit;
}

if flee_timer &gt; 0
{
    flee_timer--;
    exit;
}

//-------Recalculate the path every few seconds to avoid path calculation glitches-----
if (time mod 180 == 0)
{
    time = 0;
    path_calculated = false;
    //target_x = (irandom(ds_grid_width(current_maze)*32)+16);
    //target_y = (irandom(ds_grid_width(current_maze)*32)+16);
    /*if path_exists(path)
    {
        path_end();
        path_delete(path);
        path = path_add();
    }*/
    
}

time++;

//----------------Establish line of sight-------------
var col = collision_point(target_x,target_y,obj_wall,false,true);

if !collision_line(x,y,obj_player.x,obj_player.y,obj_wall,false,true)
{
    target_x = obj_player.x;
    target_y = obj_player.y;
    
    path_calculated = false;
}
else if distance_to_point(target_x,target_y) &lt; 2 || (target_x == noone &amp;&amp; target_y == noone) || col != noone
{
    //32 = tile_size;
    target_x = ((irandom(ds_grid_width(current_maze)-1)*32)+16);
    target_y = ((irandom(ds_grid_width(current_maze)-1)*32)+16);
    
    //Avoid setting a target point in an unreachable location.
    while col != noone
    {
        target_x = ((irandom(ds_grid_width(current_maze)-1)*32)+16);
        target_y = ((irandom(ds_grid_width(current_maze)-1)*32)+16);
        col = collision_point(target_x,target_y,obj_wall,false,true);
    }
    
    path_end();
    path_calculated = false;
}

//Calculate a path and then move on it
if path_calculated == false &amp;&amp; (target_x != noone &amp;&amp; target_y != noone) &amp;&amp; mp_grid_path(mp_maze_grid,path,x,y,target_x,target_y,true)
{
    path_start(path, walkspeed, path_action_stop, 0);
    path_calculated = true;
}

//Ensure a path doesn't exist if we didn't start one

//---------Battle Control------------
if !instance_exists(obj_battleControl) &amp;&amp; distance_to_object(obj_player) &lt; 2
{
    scr_startBattle(mob_id,"PICK_THE_DEFAULT_ONE_DUMBASS",id);
}


//-------Destroy if somehow inside wall------
//Destroy mobs inside walls
/*var inset = 2;
if collision_rectangle(bbox_left+inset,bbox_top+inset,bbox_right-inset,bbox_bottom-inset,obj_wall,false,true)
{ 
    show_debug_message("Destroyed a monster inside a wall.");
    instance_destroy();
}
*/

depth = -bbox_bottom-1;

//---GET OUT OF THE DAMN DOOR----
if instance_exists(obj_door) &amp;&amp; collision_point(x,y,obj_door,false,true)
{
    var is_boss = false;
    
    if object_index == obj_boss then is_boss = true;
    
    scr_spawn_monster_random(mob_id,1,is_boss);
    instance_destroy();
    show_debug_message("Error&gt; Relocated mob from inside door.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_shadow,0,x,y+8);
draw_self();
/*draw_path(path,x,y,false);
draw_text(x,y+5,"path_calculated: "+string(path_calculated));
draw_text(x,y+15,"path_exists: "+string(path_exists(path)));
draw_text(x,y+25,"name: "+string(id));
draw_text(x,y+35,"target: "+string(target_x)+","+string(target_y)+" Blocked: "+string(collision_point(target_x,target_y,obj_wall,false,true)));
draw_text(x,y+45,"time: "+string(time));
draw_text(x,y+55,"Flee: "+string(flee_timer));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
