<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cedrick</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walkspeed = 1;

mask_index = spr_cedrick;

instance_create(x,y+8,efct_spawn_beam);

scr_overMessage("Find the keys and escape the maze!",0,3,c_orange);

audio_play_sound(snd_The_Maw_of_the_Maze,5,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if game_state == "INTERM" 
{
    //Beam 'em up!
    if visible = true
    {
        instance_create(x,y,efct_spawn_beam);
    }
    
    visible = false;
}
else
{
    visible = true;
    
        
    //-----Movement----------
    key_right = keyboard_check(ord('D')) || keyboard_check(vk_right);
    key_left = keyboard_check(ord('A')) || keyboard_check(vk_left);
    key_up = keyboard_check(ord('W')) || keyboard_check(vk_up);
    key_down = keyboard_check(ord('S')) || keyboard_check(vk_down);
    
    var h_move = key_right-key_left;
    
    if !instance_exists(obj_battleControl) //Disable movement during battle sequence
    {
        if !collision_rectangle(bbox_left+h_move*walkspeed,bbox_top,bbox_right+h_move*walkspeed,bbox_bottom,obj_wall,false,true)
        {
            x += h_move*walkspeed;
            if h_move != 0 then image_xscale = h_move;
        }
        
        
        var v_move = key_down-key_up;
        
        if !collision_rectangle(bbox_left,bbox_top+v_move*walkspeed,bbox_right,bbox_bottom+v_move*walkspeed,obj_wall,false,true)
        {
            y += v_move*walkspeed;
        }
    }
    
    //UNLOCK THE DOOR IF WE CAN!
    if instance_exists(obj_door) &amp;&amp; distance_to_object(obj_door) &lt; 8 &amp;&amp; obj_door.unlocked == true
    {
        with obj_door
        {
            //Enable intermission mode
            instance_destroy();
            game_state = "INTERM";
            
            //Cleanup monsters!
            if instance_exists(obj_monster)
            {
                with obj_monster
                {
                    instance_destroy();
                } 
            }
            
            //Will the witch say something corny here?
        }
    }
}

depth = -y-1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
